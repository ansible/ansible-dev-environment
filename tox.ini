[tox]
requires =
    tox>=4.11.3
env_list =
    py
    lint
    pkg
    docs
skip_missing_interpreters = true
work_dir = {env:TOX_WORK_DIR:.tox}

[testenv]
description = Run pytest under {basepython}
package = editable
extras =
    test
pass_env =
    CI
    CONTAINER_*
    DOCKER_*
    GITHUB_*
    HOME
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
    USER
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{envdir}/.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
    FORCE_COLOR = 1
    PIP_CONSTRAINT = {toxinidir}/.config/constraints.txt
    PRE_COMMIT_COLOR = always
    TERM = xterm-256color
commands_pre =
    # safety measure to assure we do not accidentally run tests with broken dependencies
    {envpython} -m pip check
    # cleaning needed to prevent errors between runs
    sh -c "rm -f {envdir}/.coverage.* 2>/dev/null || true"commands =
commands_post =
    # We add coverage options but not making them mandatory as we do not want to force
    # pytest users to run coverage when they just want to run a single test with `pytest -k test`
    coverage run -m pytest {posargs:-n auto}
    # needed for upload to codecov.io
    {py,py310,py311,py312,py313}: sh -c "coverage combine -a -q --data-file={envdir}/.coverage {envdir}/.coverage.* && coverage xml --data-file={envdir}/.coverage -o {envdir}/coverage.xml --ignore-errors --fail-under=0 && COVERAGE_FILE={envdir}/.coverage coverage lcov --fail-under=0 --ignore-errors -q && COVERAGE_FILE={envdir}/.coverage coverage report --fail-under=0 --ignore-errors"
    # lcov needed for vscode integration due to https://github.com/ryanluker/vscode-coverage-gutters/issues/403
    # We fail if files are modified at the end
    git diff --exit-code
allowlist_externals =
    git
    rm
    sh

[testenv:lint]
description = Enforce quality standards under {basepython}
skip_install = true
deps =
    pre-commit
commands =
    pre-commit run --show-diff-on-failure --all-files

[testenv:pkg]
description =
    Do packaging/distribution
skip_install = true
deps =
    build>=0.9
    twine >= 4.0.2  # pyup: ignore
set_env =
commands =
    rm -rfv {toxinidir}/dist/
    python -m build \
      --outdir {toxinidir}/dist/ \
      {toxinidir}
    sh -c "python -m twine check --strict {toxinidir}/dist/*"

[testenv:docs]
description = Builds docs
package = editable
skip_install = false
extras =
    docs
set_env =
    NO_COLOR = 1
    TERM = dump
commands =
    mkdocs build {posargs:}

[testenv:deps]
description = Bump all dependencies
base_python = python3.10
skip_install = true
deps =
    {[testenv:lint]deps}
extras =
set_env =
    PIP_CONSTRAINT = /dev/null
commands_pre =
commands =
    -pre-commit run --all-files --show-diff-on-failure --hook-stage manual deps
    -pre-commit autoupdate
    git diff --exit-code
env_dir = {toxworkdir}/lint

[testenv:clean]
description = Erase coverage data
skip_install = true
deps =
    coverage[toml]
commands =
    coverage erase

[testenv:report]
description = Produce coverage report
skip_install = true
deps =
    coverage[toml]
commands =
    coverage report
    cat .tox/.tmp/.mypy/index.txt
